/**
 * @param {number} n - a positive integer
 * @return {number} - a positive integer
 */
var reverseBits = function (n: any) {
  let res = 0;
  // 传入的二进制默认是无符号数值，是大于零的0的。
  // 循环控制条件 i < 最大位数32，所以只有31位可移动，于是最大的一次移动是第一次，移动30位，到达31位。然后n在不停右移动，当n移动到符号后，符号变动就会导致值小于0，
  for (let i = 1; i < 32 && n > 0; i++) {
    /**
     * 1. n & 1，按位与，由于1填充为和n一样时，除了最后一位为1，其他位为0。
     * 所以变相只取n的最后一位，是1得1，是0得0。
     * 2. 然后<<将该位进行左移动，实现对应颠倒要求。
     * 由于补码默认是带符号的，所以最大位数31，避免符号移动。
     */
    let temp = (n & 1) << (31 - i);
    /**
     * res | temp，按位或，有1就1。由于1填充为和n一样时，除了最后一位为1，其他位为0。而res默认最后一位填充0开始。
     * 所以变相使其他位保持一致，最后一位等于temp的最后一位。
     */
    res = res | temp;
    // 缩写 res |= (n & 1) << (32 - i);
    /**
     * 每次循环处理一位，然后n 无符号右移动一位，然后原本的倒数第二位变为最后一位。依次循环
     */
    n = n >>> 1;
    // 缩写 n >>>= 1
  }
  // 无符号位移>>>，将一个数强制转换为无符号整数
  return res >>> 0;
};
export {};

/**
 * 看了题解写的
 * 关键的地方有三个
 * 1. 不要直接对数值进行处理，在函数传递参数过程中，二进制会被转换成数值。所以拿到的n是十进制数值。所以要对数值进行位处理，而不是直接处理。
 * 2. 颠倒操作指的数值背后的补码进行的位颠倒操作。在JS里，二进制最大位32位。所以在此基础上进行位运算来进行位移动
 * 3. 运算符优先级 赋值操作优先级最高(|=、>>>=)都是赋值操作
 *
 * 总结点:
 * &的使用、｜的使用、<<和>>>的区别，无符号位数值和右符号位数值的区别以及程序处理的区别。
 */
console.log(reverseBits(0b10000010100101000001111010011100));
// console.log(0b00111001011110000010100101000000);

console.log(reverseBits(0b11111111111111111111111111111101));
// console.log(0b10111111111111111111111111111111);
