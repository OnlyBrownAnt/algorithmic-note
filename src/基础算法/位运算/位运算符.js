/**
 * 计算机原理基础补充
 * 机器码、原码、反码、补码的区别和联系
 * 机器码是机器相关联的编码。原码、反码、补码都是数值的表示方法。其中原码是最为直观的，二进制计算数值的规则。
 * 但是计算机的进行数值的加减等操作时，原码方式存在各种问题，所以诞生了反码、补码。目前补码的效果最好，大部分编程语言数据存储都采用补码的方式。
 * 但是表示为数值更直观的显示，通常还需要再将补码转换为原码方式(相对于原本的原码方式，是去掉了符号位的)。
 *
 * > 这里都默认二进制表示位数限制8位。
 * - 机器码: 机器码是计算机内部使用的二进制编码，用于表示指令、数据和操作数等。机器码的具体表示方式取决于计算机体系结构和处理器设计。
 * - 原码:
 *      符号位(1位) + 数值位(7位)
 *      符号位0=正数、1=负数。
 * - 反码:
 *      符号位(1位) + 数值位(7位)
 *      表示规则: 正数表示规则和原码一致。负数表示规则，在原码基础上，符号位保持不变，其他位取反。
 *      问题: 解决原码计算加法每次都要判断符号位问题，但是存在 +0、-0的问题导致反码计算加法可能错误。
 * - 补码:
 *      符号位(1位) + 数值位(7位)
 *      表示规则: 正数表示规则和原码一致。负数表示规则，负数的补码则是将其对应正数按位取反再加1。
 *      解决问题: 解决了原码的正负判断问题，反码的+0、-0问题。补码系统的最大优点是可以在加法或减法处理中，不需因为数字的正负而使用不同的计算方式。
 */
/**
 * 位运算
 * 位运算是在二进制的基础上的运算规则，我们可以对二进制数进行相应的位运算。
 * 需要注意，实际上是对数据存储的补码进行位操作，而不是便于开发者理解而自己转换的原码方式(相对于原本的原码方式，是去掉了符号位的)。
 *
 * 双目运算
 * 将两个整数作为二进制数，对二进制数表示中的每一位（即二进位）逐一进行相应运算，即双目运算。
 * 对应只对一个整数进行运算的情况称为单目运算。
 * 常见6种位运算里除了取反(~)是单目运算，其他的都是双目运算。
 *
 * 位运算种类(6种 + 1种(不常用))
 * - 按位与(&)
 *  全1才1、有0则0。
 * - 按位或(|)
 *  有1则1、全0才0。
 * - 按位异或(^)
 *  相同为0、相异为1。
 * - 取反(~)
 *  1变为0、0变为1。
 * - 左移(<<)
 *  二进位全部左移指定若干位，高位丢弃、低位补0。
 * - 右移(>>)
 *  二进位全部右移指定若干位，低位丢弃、高位补0。
 * - 无符号右移(>>>)
 *  (零填充右移)将左操作数计算为无符号数，并将该数字的二进制表示形式移位为右操作数指定的位数。
 *  相对于右移的区别就是把符号为作为处理位纳入了移动过程。
 *
 * 位运算附加说明
 * - 位运算技巧 移动二进制 + 位运算得到位数据 = 得到数据处理结果
 * - 运算对象是二进制对象，所以对于整数都会先转为二进制，而对二进制所有位进行运算操作。
 * - 左移和右移的时候，因为二进制位数固定的，所以超出的位都会丢弃，空出的位都会补零。
 * - 高位丢弃和低位丢弃的区别
 *  - 低位丢弃是右移动时，出现位数移动超过了整数部分的最小位，所以都会被直接丢弃。
 *  - 但是高位丢弃的条件则是在不同编程语言下情况不一样。在一些语言里，当二进制达到8位就是最大位，如果超过8位就丢弃。
 *      但是在JS中，最大可容纳32位，所以超过32位之后高位才会被丢弃。
 * - ~1为什么等于-2
 * - 无符号整数是什么
 *  编程语言在进行位元算处理，是有符号整数进行处理。所以需要得到无符号整数时需要使用无符号右移运算>>>。
 *  n = n >>> 0; 就是将n由有符号整数表示无符号整数。
 *  无符号整数是一种整数表示形式，其范围从 0 到最大数值，没有正负符号位。相对于有符号整数，无符号整数只能表示非负的数值。
 *  无符号整数常用于涉及位运算、图像处理、网络协议等领域，其中数值永远为非负值，并且不需要表示负数范围。
 *  - 8位无符号整数的范围是 0 到 255（2^8-1）。
 *  - 16位无符号整数的范围是 0 到 65,535 （2^16-1）。
 *  - 32位无符号整数的范围是 0 到 4,294,967,295 （2^32-1）。
 * - 使用0b表示二进制时，指的是无符号位，在实际存储时程序会以待符号位的补码进行存储。
 */
/**
 * 按位与(&)
 */
console.log(1 & 1); // 1
console.log(1 & 0); // 0
console.log(0 & 1); // 0
console.log(0 & 0); // 0
/**
 * 按位或(|)
 */
console.log(1 | 1); // 1
console.log(1 | 0); // 1
console.log(0 | 1); // 1
console.log(0 | 0); // 0
/**
 * 按位异或(^)
 */
console.log(1 ^ 1); // 0
console.log(1 ^ 0); // 1
console.log(0 ^ 1); // 1
console.log(0 ^ 0); // 0
/**
 * 取反(~)
 */
// 数据以反码存储，对反码取反之后再转换为原码表示数值发现就是-2。
console.log(~1); // -2
console.log(~0); // -1
/**
 * 左移(<<)
 */
console.log(4 << 1); // 0b100 -> 0b1000; out: 8
// JS 32位二进制位数限制，左移时高位丢弃。
console.log(0b10000000000000000000000000000000 << 1); // out: 0
/**
 * 右移(>>)
 */
console.log(8 >> 1); // 0b1000 -> 0b100; out: 4
// 右移动时，低位被丢弃。
console.log(1 >> 1); // 0b1 -> 0b0; out: 0
//# sourceMappingURL=%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6.js.map
